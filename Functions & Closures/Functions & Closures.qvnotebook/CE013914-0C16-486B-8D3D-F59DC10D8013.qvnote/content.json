{
  "title": "Function",
  "cells": [
    {
      "type": "text",
      "data": "<h2>Function Syntax</h2>"
    },
    {
      "type": "code",
      "language": "swift",
      "data": "func functionName(parameters) -> ReturnType {\n  return returnValue\n}"
    },
    {
      "type": "text",
      "data": "<h2>Functions Without Parameters</h2>"
    },
    {
      "type": "code",
      "language": "swift",
      "data": "func sayHelloWorld() -> String {\n    return \"hello, world\"\n}"
    },
    {
      "type": "text",
      "data": "<h2>Same Function Name</h2>"
    },
    {
      "type": "text",
      "data": "<ul><li>Functions can have same ‘functionName’ so long as the compiler can differentiate between the two while calling</li><ul><li>can be done via different external names</li><li>can be done via different type declaration (Int, Double, String, etc)</li></ul></ul>"
    },
    {
      "type": "code",
      "language": "swift",
      "data": "func multipleOf(multiplier: Int, value: Int = 1) {\n  print(\"\\(multiplier) * \\(value) = \\(multiplier * value)\")\n}\nmultipleOf(multiplier: 1, value: 2)\n\n// different parameter external name\nfunc multipleOf(_ multiplier: Int, and value: Int = 1) {\n  print(\"\\(multiplier) * \\(value) = \\(multiplier * value)\")\n}\nmultipleOf(1, and: 2)"
    },
    {
      "type": "text",
      "data": "<ul style=\"color: rgb(221, 221, 221);\"><li>Can also be done via different return -&gt; types if (empty parameters) or same parameters&nbsp;</li><ul><li>same funcName but -&gt; Int, -&gt; String, etc.</li><li>* but during function call, need to help compiler differentiate&nbsp;</li></ul></ul>"
    },
    {
      "type": "code",
      "language": "swift",
      "data": "let value: String = getValue() // getValue() are the two funcs (Int/String) but saying value is of type String helps differentiate"
    },
    {
      "type": "text",
      "data": "<h2>Function Parameters Are Constants By Default</h2>"
    },
    {
      "type": "text",
      "data": "<ul><li>Can’t have functions that modify it’s parameters&nbsp;</li><ul><li>funcParameters are ‘let' constants</li></ul></ul>"
    },
    {
      "type": "code",
      "language": "swift",
      "data": "// Error: \nfunc incrementAndPrint(_ value: Int) {\n  value += 1\n  print(value)\n}\n// prints out ERROR!\n// Reason: Swift copies value before passing to the function - this behavior is called \"pass by value\""
    },
    {
      "type": "text",
      "data": "<h2>Variadic Parameters</h2>"
    },
    {
      "type": "text",
      "data": "<ul><li>A variadic parameter accepts 0 or more values of a specified type</li><ul><li>use this to specify that parameter can be passed a varying # of input values during func’s call</li><li>write variadic parameters by inserting 3 periods (…) after paramter’s type name</li></ul></ul>"
    },
    {
      "type": "code",
      "language": "swift",
      "data": "func arithmeticMean (_ numbers: Double...) -> Double {\n  var total: Double = 0\n  for number in numbers { // values passed are available w/in body as an array [numbers] of same type (Double)\n    total += number\n  }\n  return total/Double(numbers.count)\n}\n\narithmeticMean(1, 2, 3, 4, 5) // 3.0"
    },
    {
      "type": "text",
      "data": "<ul><li>* a function may have at most 1 variadic parameter</li></ul>"
    },
    {
      "type": "text",
      "data": "<h2>In-Out Parameters</h2>"
    },
    {
      "type": "text",
      "data": "<ul><li>Used if you want a func to modify it’s parameter value and want those changes to persist after the func call has ended</li><li>In-out function declared by adding ‘inout’ keyword in front of the parameter’s type&nbsp;</li></ul>"
    },
    {
      "type": "code",
      "language": "swift",
      "data": "func incrementAndPrint(_ value: inout Int) {\n  value += 1\n  print(value)\n}\n\nvar value3 = 5 // can ONLY pass a var as argument for in-out parameter b/c constants/literals can't be modified\nincrementAndPrint(&value3) // 6; function call requires ampersand (&) in front of var's name to indicate it will be modified by the func"
    },
    {
      "type": "text",
      "data": "<h2>Functions Are Data Types</h2>"
    },
    {
      "type": "text",
      "data": "<ul><li>Can assign functions to variables/constants (like an Int/String)</li><li>Function’s specific “type” is made up of its parameter types &amp; return type</li><ul><li>i.e: (Int, Int) -&gt; Int</li></ul></ul>"
    },
    {
      "type": "code",
      "language": "swift",
      "data": "// Addition\nfunc add (_ a: Int, _ b: Int) -> Int {\n  return a + b\n}\n\nvar function = add // storing function inside variable\nfunction(4, 2) // 6; calling func add, but doing so by calling variable\n\n// Subtraction\nfunc subtract (_ a: Int, _ b: Int) -> Int {\n  return a - b\n}\n\nfunction = subtract\nfunction(4,2) // 2"
    },
    {
      "type": "text",
      "data": "<h2>Function Types as Parameter Types</h2>"
    },
    {
      "type": "text",
      "data": "<ul><li>Can use a function type, i.e: (Int, Int) -&gt; Int, as a parameter type for another function</li><ul><li>allows you to leave some aspects of a function’s implementation for the function’s caller to provide</li></ul></ul>"
    },
    {
      "type": "code",
      "language": "swift",
      "data": "func addTwoInts(_ a: Int, _ b: Int) -> Int {\n    return a + b\n}\n\nfunc printMathResult(_ mathFunction: (Int, Int) -> Int, _ a: Int, _ b: Int) {\n    print(\"Result: \\(mathFunction(a, b))\") // a, b are (Int, Int) & are input values \n}\n\nprintMathResult(addTwoInts, 3, 5)\n// prints \"Result: 8\""
    },
    {
      "type": "text",
      "data": "<ul><li>Can pass the function ‘addTwoInts’ as parameter for ‘mathFunction’ b/c they’re of the same type</li><li>Role of printMathFunction is to print result of a call to a mathFunc of appropriate type</li></ul>"
    },
    {
      "type": "text",
      "data": "<h2>Function Types as Return Types</h2>"
    },
    {
      "type": "text",
      "data": "<ul><li>Can use function type as return type of another function</li><ul><li>do this by writing func type after -&gt;</li></ul></ul>"
    },
    {
      "type": "code",
      "language": "swift",
      "data": "func stepForward(_ input: Int) -> Int {\n    return input + 1\n}\nfunc stepBackward(_ input: Int) -> Int {\n    return input - 1\n}\n\nfunc chooseStepFunction(backward: Bool) -> (Int) -> Int {\n    return backward ? stepBackward : stepForward\n}\n\nvar currentValue = 3\nlet moveNearerToZero = chooseStepFunction(backward: currentValue > 0)\n\nprint(moveNearerToZero(currentValue)) // prints \"2\"\n\nwhile currentValue != 0 {\n    print(\"\\(currentValue)... \")\n    currentValue = moveNearerToZero(currentValue)\n}\n// prints \"3\", \"2\", \"1\"\n"
    },
    {
      "type": "text",
      "data": ""
    },
    {
      "type": "text",
      "data": ""
    },
    {
      "type": "text",
      "data": ""
    },
    {
      "type": "text",
      "data": ""
    },
    {
      "type": "text",
      "data": ""
    },
    {
      "type": "text",
      "data": ""
    },
    {
      "type": "text",
      "data": ""
    },
    {
      "type": "text",
      "data": ""
    },
    {
      "type": "text",
      "data": ""
    },
    {
      "type": "text",
      "data": ""
    }
  ]
}