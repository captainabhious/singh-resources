{
  "title": "Functions",
  "cells": [
    {
      "type": "text",
      "data": "<h2>FUNCTIONS:</h2>"
    },
    {
      "type": "text",
      "data": "<div>&nbsp; Functions are self-contained chunks of code performing a specific task.</div><div><ul><li>f(x)'s have a name that describe their purpose. that name is used to \"call\" the f(x) to perform the task when needed<br></li><li>can provide data to a f(x) by sending parameters to it &amp; f(x) can give data back as result<br></li><li>every function in Swift has a type, consisting of the function's parameter types &amp; return type<br></li><li>can use this type like any other type in Swift, making it easy to pass f(x)s as parameters to other f(x)s, &amp; to return f(x)s from f(x)s<br></li><li>f(x)s can also be written w/in other f(x)s to encapsulate useful functionality w/in a nested f(x) scope<br></li></ul></div>"
    },
    {
      "type": "text",
      "data": "<h3><b>Defining &amp; Calling Functions:</b></h3>"
    },
    {
      "type": "code",
      "language": "swift",
      "data": "func greet(person: String) -> String {\n    let greeting = \"Hello, \" + person + \"!\"\n    return greeting\n}"
    },
    {
      "type": "code",
      "language": "swift",
      "data": "// func defining:\nfunc greetAgain(person: String) -> String { // input parameter: String, return type: String\n    return \"Hello again, \" + person + \"!\" // func body\n}\n// func calling:\nprint(greetAgain(person: \"Hannah\")) // Hello again, Hannah!\nprint(greetAgain(person: \"Bob\")) // Hello again, Bob!"
    },
    {
      "type": "text",
      "data": "<h3 style=\"color: rgb(221, 221, 221);\"><b>Function Parameters &amp; Return Values:</b></h3><div><h3 style=\"color: rgb(221, 221, 221);\"><span style=\"font-weight: normal;\"><u>Functions Without Parameters:</u></span></h3></div>"
    },
    {
      "type": "text",
      "data": "Functions not always required to define input parameters."
    },
    {
      "type": "code",
      "language": "swift",
      "data": "func sayHelloWorld() -> String {\n    return \"Hello, world.\" // always returns same String message when called\n}\nprint(sayHelloWorld()) // Hello, world."
    },
    {
      "type": "text",
      "data": "<h3 style=\"color: rgb(221, 221, 221);\"><span style=\"font-weight: normal;\"><u>Functions With Multiple Parameters:</u></span></h3>"
    },
    {
      "type": "text",
      "data": "Functions can have multiple input parameters, which are written w/in funcâ€™s ( ) separated by commas"
    },
    {
      "type": "code",
      "language": "swift",
      "data": "func greet(person: String, alreadyGreeted: Bool) -> String {\n    if alreadyGreeted {\n        return greetAgain(person: person)\n    } else {\n        return greet(person: person)\n    }\n}\n\nprint(greet(person: \"Timothy\", alreadyGreeted: true)) // Hello again, Timothy!\n// diff from previous greet func b/c this one takes in 2 arguments "
    },
    {
      "type": "text",
      "data": "<h3 style=\"color: rgb(221, 221, 221);\"><span style=\"font-weight: normal;\"><u>Functions Without Return Values:</u></span></h3>"
    },
    {
      "type": "text",
      "data": "Return value of first function ignored when second function calls first."
    },
    {
      "type": "code",
      "language": "swift",
      "data": "func printAndCount(string: String) -> Int {\n    print(string)\n    return string.count\n}\nfunc printWithoutCounting(string: String) {\n    let _ = printAndCount(string: string)\n}\nprintAndCount(string: \"hello, world\")\n// prints \"hello, world\" & returns a value of 12\nprintWithoutCounting(string: \"hello, world\")\n// prints \"hello, world\" but does not return a value"
    },
    {
      "type": "text",
      "data": "&nbsp; * a function that says it will return a value (-&gt; in func declaration) must always do so"
    },
    {
      "type": "text",
      "data": "<h3 style=\"color: rgb(221, 221, 221);\"><span style=\"font-weight: normal;\"><u>Functions With Multiple Return Values:</u></span></h3>"
    },
    {
      "type": "text",
      "data": "You can use a tuple type as the return type for a function to return multiple values as part of one compound return&nbsp;<span style=\"color: rgb(221, 221, 221);\">value</span><span style=\"color: rgb(221, 221, 221);\">.&nbsp;</span>"
    },
    {
      "type": "code",
      "language": "swift",
      "data": "func minMax(array: [Int]) -> (min: Int, max: Int) { // function finds smallest & largest Ints\n    var currentMin = array[0]\n    var currentMax = array[0]\n    for value in array {\n        if value < currentMin {\n            currentMin = value\n        } else if value > currentMax {\n            currentMax = value\n        }\n    }\n    return (currentMin, currentMax)\n}\n\nprint(minMax(array: [4, 234, 55, 7, 123, 4, 678, 369, 1])) // (min: 1, max: 678)"
    },
    {
      "type": "text",
      "data": ""
    },
    {
      "type": "text",
      "data": ""
    },
    {
      "type": "text",
      "data": "<h3><br></h3>"
    },
    {
      "type": "text",
      "data": ""
    },
    {
      "type": "text",
      "data": "<br>"
    },
    {
      "type": "text",
      "data": "<div><br></div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div>"
    }
  ]
}